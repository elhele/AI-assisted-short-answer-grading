6.6 They can be passed by value or by reference
6.6 Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.
6.6 -Nonconstant pointer to nonconstant data     -Nonconstant pointer to constant data     -Constant pointer to nonconstant data     -Constant pointer to constant data
6.6 Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.
6.6 Pass-by-value or pass-by-reference.
6.6 you can pass a pointer to a pointer or pass a reference to pointer.
6.6 by address &bPtr or directly bPtr.
6.6 Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data.
6.6 By argument and reference.
6.6 Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.
6.6 pass by value and pass by reference with reference or pointer arguments.
6.6 you can pass them with the pointer (*) or the memory address (&)
6.6 nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const
6.6 Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data
6.6 Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.
6.6 Pass by reference with reference arguments. function(int &) Pass by reference with pointer arguments. function(int *)
6.6 you can pass the reference or the dereference in a function
6.6 1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data. 4. Constant pointer to constant date.
6.6 constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data
6.6 Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data
6.6 Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.
6.6 There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.
6.6 nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data
6.6 pass by value, pass by reference with reference arguments, pass by reference with pointer arguments
6.6 you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither
6.6 there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function
